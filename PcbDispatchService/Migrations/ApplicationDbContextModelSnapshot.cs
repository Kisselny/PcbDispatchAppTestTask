// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PcbDispatchService.Dal;

#nullable disable

namespace PcbDispatchService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessProcessType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("Id");

                    b.ToTable("BusinessProcessStateBase");

                    b.HasDiscriminator<string>("BusinessProcessType").HasValue("BusinessProcessStateBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.BoardComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PrintedCircuitBoardId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeName");

                    b.HasIndex("PrintedCircuitBoardId");

                    b.ToTable("BoardComponent");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.ComponentType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("AvailableSupply")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.ToTable("ComponentTypes");

                    b.HasData(
                        new
                        {
                            Name = "A0-B0",
                            AvailableSupply = 28
                        },
                        new
                        {
                            Name = "A0-B1",
                            AvailableSupply = 66
                        },
                        new
                        {
                            Name = "A1-B0",
                            AvailableSupply = 47
                        },
                        new
                        {
                            Name = "A1-B1",
                            AvailableSupply = 12
                        });
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.PrintedCircuitBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessProcessStateBaseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualityControlStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessStateBaseId");

                    b.ToTable("PrintedCircuitBoards");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.ComponentInstallationState", b =>
                {
                    b.HasBaseType("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase");

                    b.HasDiscriminator().HasValue("ComponentInstallation");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.PackagingState", b =>
                {
                    b.HasBaseType("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase");

                    b.HasDiscriminator().HasValue("PackagingState");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.QualityControlState", b =>
                {
                    b.HasBaseType("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase");

                    b.HasDiscriminator().HasValue("QualityControlState");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.RegistrationState", b =>
                {
                    b.HasBaseType("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase");

                    b.HasDiscriminator().HasValue("Registration");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Logic.States.RepairState", b =>
                {
                    b.HasBaseType("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase");

                    b.HasDiscriminator().HasValue("RepairState");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.BoardComponent", b =>
                {
                    b.HasOne("PcbDispatchService.Domain.Models.ComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PcbDispatchService.Domain.Models.PrintedCircuitBoard", null)
                        .WithMany("Components")
                        .HasForeignKey("PrintedCircuitBoardId");

                    b.Navigation("ComponentType");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.PrintedCircuitBoard", b =>
                {
                    b.HasOne("PcbDispatchService.Domain.Logic.States.BusinessProcessStateBase", "BusinessProcessStateBase")
                        .WithMany()
                        .HasForeignKey("BusinessProcessStateBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProcessStateBase");
                });

            modelBuilder.Entity("PcbDispatchService.Domain.Models.PrintedCircuitBoard", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
